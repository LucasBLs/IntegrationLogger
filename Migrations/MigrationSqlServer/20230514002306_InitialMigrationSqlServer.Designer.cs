// <auto-generated />
using System;
using IntegrationLogger.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IntegrationLogger.Migrations.MigrationSqlServer
{
    [DbContext(typeof(IntegrationLogContextSqlServer))]
    [Migration("20230514002306_InitialMigrationSqlServer")]
    partial class InitialMigrationSqlServer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("IntegrationLogger.Models.Configuration.EmailConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CcEmails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailBody")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("EmailPassword")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailSubject")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("LogConfigurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("int");

                    b.Property<string>("SmtpServer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LogConfigurationId")
                        .IsUnique();

                    b.HasIndex("RecipientEmail");

                    b.HasIndex("SenderEmail");

                    b.HasIndex("SmtpServer");

                    b.ToTable("EmailConfiguration", (string)null);
                });

            modelBuilder.Entity("IntegrationLogger.Models.Configuration.LogConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArchivePath")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("AutoArchive")
                        .HasColumnType("bit");

                    b.Property<bool>("EmailNotification")
                        .HasColumnType("bit");

                    b.Property<int>("LogLevel")
                        .HasColumnType("int");

                    b.Property<int>("LogRetentionPeriod")
                        .HasColumnType("int");

                    b.Property<string>("LogSource")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LogStepByStep")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LogSource");

                    b.ToTable("LogConfiguration", (string)null);
                });

            modelBuilder.Entity("IntegrationLogger.Models.Gateway.GatewayDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApiGatewayLogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApiGatewayLogId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("ApiGatewayLogId", "Timestamp");

                    b.ToTable("GatewayDetail", (string)null);
                });

            modelBuilder.Entity("IntegrationLogger.Models.Gateway.GatewayLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HttpMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("RequestDuration")
                        .HasColumnType("bigint");

                    b.Property<string>("RequestPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ProjectName");

                    b.HasIndex("RequestDuration");

                    b.HasIndex("StatusCode");

                    b.HasIndex("Timestamp");

                    b.HasIndex("ProjectName", "Timestamp");

                    b.ToTable("GatewayLog", (string)null);
                });

            modelBuilder.Entity("IntegrationLogger.Models.Integration.IntegrationDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DetailIdentifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("IntegrationLogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DetailIdentifier");

                    b.HasIndex("IntegrationLogId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Timestamp", "IntegrationLogId");

                    b.HasIndex("Timestamp", "IntegrationLogId", "DetailIdentifier");

                    b.ToTable("IntegrationDetail", (string)null);
                });

            modelBuilder.Entity("IntegrationLogger.Models.Integration.IntegrationItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<Guid>("IntegrationDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemStatus")
                        .HasColumnType("int");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("IntegrationDetailId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Timestamp", "IntegrationDetailId");

                    b.ToTable("IntegrationItem", (string)null);
                });

            modelBuilder.Entity("IntegrationLogger.Models.Integration.IntegrationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExternalSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntegrationName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("IntegrationName");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Timestamp", "IntegrationName");

                    b.ToTable("IntegrationLog", (string)null);
                });

            modelBuilder.Entity("IntegrationLogger.Models.Configuration.EmailConfiguration", b =>
                {
                    b.HasOne("IntegrationLogger.Models.Configuration.LogConfiguration", "LogConfiguration")
                        .WithOne("EmailConfiguration")
                        .HasForeignKey("IntegrationLogger.Models.Configuration.EmailConfiguration", "LogConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogConfiguration");
                });

            modelBuilder.Entity("IntegrationLogger.Models.Gateway.GatewayDetail", b =>
                {
                    b.HasOne("IntegrationLogger.Models.Gateway.GatewayLog", "ApiGatewayLog")
                        .WithMany()
                        .HasForeignKey("ApiGatewayLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiGatewayLog");
                });

            modelBuilder.Entity("IntegrationLogger.Models.Integration.IntegrationDetail", b =>
                {
                    b.HasOne("IntegrationLogger.Models.Integration.IntegrationLog", "IntegrationLog")
                        .WithMany("Details")
                        .HasForeignKey("IntegrationLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IntegrationLog");
                });

            modelBuilder.Entity("IntegrationLogger.Models.Integration.IntegrationItem", b =>
                {
                    b.HasOne("IntegrationLogger.Models.Integration.IntegrationDetail", "IntegrationDetail")
                        .WithMany("Items")
                        .HasForeignKey("IntegrationDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IntegrationDetail");
                });

            modelBuilder.Entity("IntegrationLogger.Models.Configuration.LogConfiguration", b =>
                {
                    b.Navigation("EmailConfiguration")
                        .IsRequired();
                });

            modelBuilder.Entity("IntegrationLogger.Models.Integration.IntegrationDetail", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("IntegrationLogger.Models.Integration.IntegrationLog", b =>
                {
                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
